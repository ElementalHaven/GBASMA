# instruction	type	canHaveCondition	argCount	firstArgIsOptional
#---------------------------------------------------------------------------------------------------------------------

ld		LOAD	false			2		false			Load
ldd		LOAD	false			2		false			Load & Decrement HL
ldi		LOAD	false			2		false			Load & Increment HL
ldh		LOAD	false			2		false			Load High

push		UTIL	false			1		false			Push register onto stack
pop		UTIL	false			1		false			Pop register from stack

ADD		MATH	false			2		true			Add
ADC		MATH	false			2		true			Add with carry
SUB		MATH	false			1		false			Subtract
SBC		MATH	false			1		false			Subtract with carry
AND		MATH	false			1		false			Bitwise AND
OR		MATH	false			1		false			Bitwise OR
XOR		MATH	false			1		false			Exclusive OR
CP		MATH	false			1		false			Compare
INC		MATH	false			1		false			Increment
DEC		MATH	false			1		false			Decrement

SWAP		UTIL	false			1		false			Swap nibbles
DAA		UTIL	false			0		false			Decimal Adjust Accumulator(conver A to Binary Coded Decimal)
CPL		UTIL	false			0		false			Complement(1s complement A, aka XOR $FF)
CCF		UTIL	false			0		false			Complement Carry Flag(carry = !carry)
SCF		UTIL	false			0		false			Set Carry Flag
NOP		UTIL	false			0		false			No Operation
HALT		UTIL	false			0		false			Halt CPU until interrupt occurs
STOP		UTIL	false			0		false			Stop CPU(gb) or toggle CPU speed(gbc)
DI		UTIL	false			0		false			Disable Interrupts
EI		UTIL	false			0		false			Enable Interrupts

RLCA		SHIFT	false			0		false			Rotate Left Circular Accumulator
RLC		SHIFT	false			1		false			Rotate Left Circular
RLA		SHIFT	false			0		false			Rotate Left Accumulator
RL		SHIFT	false			1		false			Rotate Left
RRCA		SHIFT	false			0		false			Rotate Right Circular Accumulator
RRC		SHIFT	false			1		false			Rotate Right Circular
RRA		SHIFT	false			0		false			Rotate Right Accumulator
RR		SHIFT	false			1		false			Rotate Right
SLA		SHIFT	false			1		false			Shift Left Arithmetically
SRA		SHIFT	false			1		false			Shfit Right Arithmetically
SRL		SHIFT	false			1		false			Shift Right Logically

BIT		BIT	false			2		false			Test Bit
SET		BIT	false			2		false			Set Bit
RES		BIT	false			2		false			Reset Bit

jp		JUMP	true			1		false			Jump
jr		JUMP	true			1		false			Jump Relative

call		CALL	true			1		false			Call
rst		CALL	false			1		false			Reset

ret		JUMP	true			0		false			Return
reti		JUMP	false			0		false			Return & Enable Interrupts